// vite.config.ts
import react from "file:///D:/arkhi/node_modules/@vitejs/plugin-react/dist/index.mjs";
import ssr from "file:///D:/arkhi/node_modules/vite-plugin-ssr/dist/cjs/node/plugin/index.js";

// arkhi/plugins/cms.ts
import { readdirSync, readFileSync, statSync } from "fs";
import path from "path";
var postExtensions = [".md", ".mdx"];
function parseConfig(directory) {
  const configPath = path.join(directory, "config.json");
  try {
    const configData = readFileSync(configPath, "utf-8");
    const config2 = JSON.parse(configData);
    return config2;
  } catch (e) {
    console.warn("Config not found on", directory);
    return void 0;
  }
}
function parseContents(directory) {
  const files = readdirSync(directory);
  const content = {
    children: [],
    name: path.parse(directory).base,
    path: "",
    type: "",
    assets: [],
    config: void 0
  };
  files.forEach((file) => {
    const filePath = path.join(directory, file);
    const fileStat = statSync(filePath);
    if (fileStat.isDirectory()) {
      content.children[file] = parseContents(filePath);
      return;
    }
    if (file === "config.json") {
      content.config = parseConfig(directory);
      return;
    }
    const pathInfo = path.parse(file);
    const isContent = postExtensions.includes(pathInfo.ext);
    if (pathInfo.name === "index" && isContent) {
      content.name = path.parse(directory).base;
      content.path = filePath;
      content.type = pathInfo.ext;
      return;
    }
    if (isContent) {
      content.children[file] = {
        children: [],
        name: pathInfo.name,
        path: filePath,
        type: pathInfo.ext,
        assets: [],
        config: void 0
      };
      return;
    }
    content.assets.push(filePath);
  });
  return content;
}
function compileMetadata() {
  const contentDirectory = path.join(process.cwd(), "/content");
  const contentSystem = parseContents(contentDirectory);
  return contentSystem;
}
function arkhiCMS() {
  contents;
  return {
    name: "vite-plugin-arkhi-cms",
    buildStart() {
      contents.root = compileMetadata();
    },
    enforce: "pre",
    configureServer({ watcher }) {
      watcher.add(`${process.cwd}/content/**`);
      watcher.on("change", (filePath) => {
        contents.root = compileMetadata();
      });
    }
  };
}
var contents = {
  root: {
    children: [],
    name: "",
    path: "",
    type: "",
    assets: [],
    config: void 0
  }
};

// vite.config.ts
import tsconfigPaths from "file:///D:/arkhi/node_modules/vite-tsconfig-paths/dist/index.mjs";
var config = {
  plugins: [react(), ssr(), tsconfigPaths(), arkhiCMS()]
};
var vite_config_default = config;
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAiYXJraGkvcGx1Z2lucy9jbXMudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJEOlxcXFxhcmtoaVwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiRDpcXFxcYXJraGlcXFxcdml0ZS5jb25maWcudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0Q6L2Fya2hpL3ZpdGUuY29uZmlnLnRzXCI7aW1wb3J0IHJlYWN0IGZyb20gXCJAdml0ZWpzL3BsdWdpbi1yZWFjdFwiO1xyXG5pbXBvcnQgc3NyIGZyb20gXCJ2aXRlLXBsdWdpbi1zc3IvcGx1Z2luXCI7XHJcbmltcG9ydCB7IGFya2hpQ01TIH0gZnJvbSBcIi4vYXJraGkvcGx1Z2luc1wiO1xyXG5pbXBvcnQgdHNjb25maWdQYXRocyBmcm9tIFwidml0ZS10c2NvbmZpZy1wYXRoc1wiO1xyXG5pbXBvcnQgeyBVc2VyQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcclxuXHJcbmNvbnN0IGNvbmZpZzogVXNlckNvbmZpZyA9IHtcclxuXHRwbHVnaW5zOiBbcmVhY3QoKSwgc3NyKCksIHRzY29uZmlnUGF0aHMoKSwgYXJraGlDTVMoKV0sXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25maWc7XHJcbiIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiRDpcXFxcYXJraGlcXFxcYXJraGlcXFxccGx1Z2luc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiRDpcXFxcYXJraGlcXFxcYXJraGlcXFxccGx1Z2luc1xcXFxjbXMudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0Q6L2Fya2hpL2Fya2hpL3BsdWdpbnMvY21zLnRzXCI7aW1wb3J0IHsgUGx1Z2luIH0gZnJvbSBcInZpdGVcIjtcclxuaW1wb3J0IHsgcmVhZGRpclN5bmMsIHJlYWRGaWxlU3luYywgc3RhdFN5bmMgfSBmcm9tIFwiZnNcIjtcclxuaW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcclxuXHJcbmNvbnN0IHBvc3RFeHRlbnNpb25zID0gW1wiLm1kXCIsIFwiLm1keFwiXTtcclxuXHJcbi8vXHU2NTg3XHU3QUUwXHU3Njg0bWV0YWRhdGFcclxudHlwZSBBcnRpY2xlQ29uZmlnID0ge1xyXG5cdHRpdGxlOiBzdHJpbmc7XHJcblx0Y3JlYXRlZDogRGF0ZTtcclxuXHRlZGl0ZWQ6IERhdGU7XHJcblx0YXV0aG9yOiBzdHJpbmc7XHJcblx0dGFnczogc3RyaW5nW107XHJcbn07XHJcblxyXG50eXBlIENvbnRlbnROb2RlID0ge1xyXG5cdFtrZXk6IHN0cmluZ106IENvbnRlbnQ7XHJcbn07XHJcblxyXG50eXBlIENvbnRlbnQgPSB7XHJcblx0Y2hpbGRyZW46IENvbnRlbnROb2RlO1xyXG5cdHBhdGg6IHN0cmluZzsgLy9cdTZBOTRcdTY4NDhcdThERUZcdTVGOTFcclxuXHRuYW1lOiBzdHJpbmc7XHJcblx0dHlwZTogc3RyaW5nOyAvL1x1NkE5NFx1Njg0OFx1OTg1RVx1NTc4Qlx1RkYwOFx1NTI2Rlx1NkE5NFx1NTQwRFx1RkYwOVxyXG5cdGFzc2V0czogc3RyaW5nW107IC8vXHU2QTk0XHU2ODQ4XHU3NkY4XHU5NURDXHU3Njg0XHU4Q0M3XHU2RTkwXHJcblx0Y29uZmlnPzogQXJ0aWNsZUNvbmZpZzsgLy9cdTZBOTRcdTY4NDhcdTc2ODRcdTc2RjhcdTk1RENcdTkxNERcdTdGNkVcdUZGMDhcdTU5ODJcdTY3OUNcdTY3MDlcdUZGMDlcclxufTtcclxuXHJcbmZ1bmN0aW9uIHBhcnNlQ29uZmlnKGRpcmVjdG9yeTogc3RyaW5nKTogQXJ0aWNsZUNvbmZpZyB8IHVuZGVmaW5lZCB7XHJcblx0Y29uc3QgY29uZmlnUGF0aCA9IHBhdGguam9pbihkaXJlY3RvcnksIFwiY29uZmlnLmpzb25cIik7XHJcblx0dHJ5IHtcclxuXHRcdGNvbnN0IGNvbmZpZ0RhdGEgPSByZWFkRmlsZVN5bmMoY29uZmlnUGF0aCwgXCJ1dGYtOFwiKTtcclxuXHRcdGNvbnN0IGNvbmZpZyA9IEpTT04ucGFyc2UoY29uZmlnRGF0YSk7XHJcblx0XHQvLyBUT0RPIFVzZSB6b2QgdG8gcGFyc2UgY29uZmlnXHJcblx0XHRyZXR1cm4gY29uZmlnO1xyXG5cdH0gY2F0Y2ggKGUpIHtcclxuXHRcdGNvbnNvbGUud2FybihcIkNvbmZpZyBub3QgZm91bmQgb25cIiwgZGlyZWN0b3J5KTtcclxuXHRcdHJldHVybiB1bmRlZmluZWQ7XHJcblx0fVxyXG59XHJcblxyXG4vL1x1OEI4MFx1NTNENlx1OENDN1x1NjU5OVx1NTkzRVx1RkYwQ1x1NUVGQVx1N0FDQkNNU1x1OENDN1x1NjU5OVx1NTE2N1x1NUJCOVxyXG5mdW5jdGlvbiBwYXJzZUNvbnRlbnRzKGRpcmVjdG9yeTogc3RyaW5nKTogQ29udGVudCB7XHJcblx0Y29uc3QgZmlsZXMgPSByZWFkZGlyU3luYyhkaXJlY3RvcnkpO1xyXG5cdGNvbnN0IGNvbnRlbnQ6IENvbnRlbnQgPSB7XHJcblx0XHRjaGlsZHJlbjogW10gYXMgdW5rbm93biBhcyBDb250ZW50Tm9kZSxcclxuXHRcdG5hbWU6IHBhdGgucGFyc2UoZGlyZWN0b3J5KS5iYXNlLFxyXG5cdFx0cGF0aDogXCJcIixcclxuXHRcdHR5cGU6IFwiXCIsXHJcblx0XHRhc3NldHM6IFtdLFxyXG5cdFx0Y29uZmlnOiB1bmRlZmluZWQsXHJcblx0fTtcclxuXHJcblx0ZmlsZXMuZm9yRWFjaCgoZmlsZSkgPT4ge1xyXG5cdFx0Y29uc3QgZmlsZVBhdGggPSBwYXRoLmpvaW4oZGlyZWN0b3J5LCBmaWxlKTtcclxuXHRcdGNvbnN0IGZpbGVTdGF0ID0gc3RhdFN5bmMoZmlsZVBhdGgpO1xyXG5cclxuXHRcdC8vIENoZWNrIGRpcmVjdG9yeSBmaXJzdCwgaW4gY2FzZSBhIGRpcmVjb3J5IGlzIG5hbWVkIGxpa2UgYSBmaWxlLlxyXG5cdFx0aWYgKGZpbGVTdGF0LmlzRGlyZWN0b3J5KCkpIHtcclxuXHRcdFx0Y29udGVudC5jaGlsZHJlbltmaWxlXSA9IHBhcnNlQ29udGVudHMoZmlsZVBhdGgpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGZpbGUgPT09IFwiY29uZmlnLmpzb25cIikge1xyXG5cdFx0XHRjb250ZW50LmNvbmZpZyA9IHBhcnNlQ29uZmlnKGRpcmVjdG9yeSk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBwYXRoSW5mbyA9IHBhdGgucGFyc2UoZmlsZSk7XHJcblx0XHRjb25zdCBpc0NvbnRlbnQgPSBwb3N0RXh0ZW5zaW9ucy5pbmNsdWRlcyhwYXRoSW5mby5leHQpO1xyXG5cclxuXHRcdGlmIChwYXRoSW5mby5uYW1lID09PSBcImluZGV4XCIgJiYgaXNDb250ZW50KSB7XHJcblx0XHRcdGNvbnRlbnQubmFtZSA9IHBhdGgucGFyc2UoZGlyZWN0b3J5KS5iYXNlO1xyXG5cdFx0XHRjb250ZW50LnBhdGggPSBmaWxlUGF0aDtcclxuXHRcdFx0Y29udGVudC50eXBlID0gcGF0aEluZm8uZXh0O1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGlzQ29udGVudCkge1xyXG5cdFx0XHRjb250ZW50LmNoaWxkcmVuW2ZpbGVdID0ge1xyXG5cdFx0XHRcdGNoaWxkcmVuOiBbXSBhcyB1bmtub3duIGFzIENvbnRlbnROb2RlLFxyXG5cdFx0XHRcdG5hbWU6IHBhdGhJbmZvLm5hbWUsXHJcblx0XHRcdFx0cGF0aDogZmlsZVBhdGgsXHJcblx0XHRcdFx0dHlwZTogcGF0aEluZm8uZXh0LFxyXG5cdFx0XHRcdGFzc2V0czogW10sXHJcblx0XHRcdFx0Y29uZmlnOiB1bmRlZmluZWQsXHJcblx0XHRcdH07XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRjb250ZW50LmFzc2V0cy5wdXNoKGZpbGVQYXRoKTtcclxuXHR9KTtcclxuXHJcblx0cmV0dXJuIGNvbnRlbnQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbXBpbGVNZXRhZGF0YSgpOiBDb250ZW50IHtcclxuXHRjb25zdCBjb250ZW50RGlyZWN0b3J5ID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksIFwiL2NvbnRlbnRcIik7XHJcblx0Y29uc3QgY29udGVudFN5c3RlbSA9IHBhcnNlQ29udGVudHMoY29udGVudERpcmVjdG9yeSk7XHJcblx0cmV0dXJuIGNvbnRlbnRTeXN0ZW07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFya2hpQ01TKCk6IFBsdWdpbiB7XHJcblx0Y29udGVudHM7XHJcblx0cmV0dXJuIHtcclxuXHRcdG5hbWU6IFwidml0ZS1wbHVnaW4tYXJraGktY21zXCIsXHJcblx0XHRidWlsZFN0YXJ0KCkge1xyXG5cdFx0XHRjb250ZW50cy5yb290ID0gY29tcGlsZU1ldGFkYXRhKCk7XHJcblx0XHR9LFxyXG5cdFx0ZW5mb3JjZTogXCJwcmVcIixcclxuXHRcdGNvbmZpZ3VyZVNlcnZlcih7IHdhdGNoZXIgfSkge1xyXG5cdFx0XHR3YXRjaGVyLmFkZChgJHtwcm9jZXNzLmN3ZH0vY29udGVudC8qKmApO1xyXG5cdFx0XHR3YXRjaGVyLm9uKFwiY2hhbmdlXCIsIChmaWxlUGF0aCkgPT4ge1xyXG5cdFx0XHRcdC8vIFRPRE8gXHU1NzI4XHU2NkY0XHU2NUIwXHU2QTk0XHU2ODQ4XHU2NjQyXHVGRjBDXHU2NkY0XHU2NUIwXHU4QTcyXHU0RjREXHU3RjZFXHU3Njg0XHU2QTM5XHJcblx0XHRcdFx0Y29udGVudHMucm9vdCA9IGNvbXBpbGVNZXRhZGF0YSgpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0sXHJcblx0fTtcclxufVxyXG5cclxuY29uc3QgY29udGVudHMgPSB7XHJcblx0cm9vdDoge1xyXG5cdFx0Y2hpbGRyZW46IFtdIGFzIHVua25vd24gYXMgQ29udGVudE5vZGUsXHJcblx0XHRuYW1lOiBcIlwiLFxyXG5cdFx0cGF0aDogXCJcIixcclxuXHRcdHR5cGU6IFwiXCIsXHJcblx0XHRhc3NldHM6IFtdLFxyXG5cdFx0Y29uZmlnOiB1bmRlZmluZWQsXHJcblx0fSBhcyBDb250ZW50LFxyXG59O1xyXG5cclxuZXhwb3J0IHsgYXJraGlDTVMsIGNvbnRlbnRzIH07XHJcbmV4cG9ydCB0eXBlIHsgQ29udGVudCwgQ29udGVudE5vZGUsIEFydGljbGVDb25maWcgfTtcclxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUE4TSxPQUFPLFdBQVc7QUFDaE8sT0FBTyxTQUFTOzs7QUNBaEIsU0FBUyxhQUFhLGNBQWMsZ0JBQWdCO0FBQ3BELE9BQU8sVUFBVTtBQUVqQixJQUFNLGlCQUFpQixDQUFDLE9BQU8sTUFBTTtBQXdCckMsU0FBUyxZQUFZLFdBQThDO0FBQ2xFLFFBQU0sYUFBYSxLQUFLLEtBQUssV0FBVyxhQUFhO0FBQ3JELE1BQUk7QUFDSCxVQUFNLGFBQWEsYUFBYSxZQUFZLE9BQU87QUFDbkQsVUFBTUEsVUFBUyxLQUFLLE1BQU0sVUFBVTtBQUVwQyxXQUFPQTtBQUFBLEVBQ1IsU0FBUyxHQUFQO0FBQ0QsWUFBUSxLQUFLLHVCQUF1QixTQUFTO0FBQzdDLFdBQU87QUFBQSxFQUNSO0FBQ0Q7QUFHQSxTQUFTLGNBQWMsV0FBNEI7QUFDbEQsUUFBTSxRQUFRLFlBQVksU0FBUztBQUNuQyxRQUFNLFVBQW1CO0FBQUEsSUFDeEIsVUFBVSxDQUFDO0FBQUEsSUFDWCxNQUFNLEtBQUssTUFBTSxTQUFTLEVBQUU7QUFBQSxJQUM1QixNQUFNO0FBQUEsSUFDTixNQUFNO0FBQUEsSUFDTixRQUFRLENBQUM7QUFBQSxJQUNULFFBQVE7QUFBQSxFQUNUO0FBRUEsUUFBTSxRQUFRLENBQUMsU0FBUztBQUN2QixVQUFNLFdBQVcsS0FBSyxLQUFLLFdBQVcsSUFBSTtBQUMxQyxVQUFNLFdBQVcsU0FBUyxRQUFRO0FBR2xDLFFBQUksU0FBUyxZQUFZLEdBQUc7QUFDM0IsY0FBUSxTQUFTLElBQUksSUFBSSxjQUFjLFFBQVE7QUFDL0M7QUFBQSxJQUNEO0FBRUEsUUFBSSxTQUFTLGVBQWU7QUFDM0IsY0FBUSxTQUFTLFlBQVksU0FBUztBQUN0QztBQUFBLElBQ0Q7QUFFQSxVQUFNLFdBQVcsS0FBSyxNQUFNLElBQUk7QUFDaEMsVUFBTSxZQUFZLGVBQWUsU0FBUyxTQUFTLEdBQUc7QUFFdEQsUUFBSSxTQUFTLFNBQVMsV0FBVyxXQUFXO0FBQzNDLGNBQVEsT0FBTyxLQUFLLE1BQU0sU0FBUyxFQUFFO0FBQ3JDLGNBQVEsT0FBTztBQUNmLGNBQVEsT0FBTyxTQUFTO0FBQ3hCO0FBQUEsSUFDRDtBQUVBLFFBQUksV0FBVztBQUNkLGNBQVEsU0FBUyxJQUFJLElBQUk7QUFBQSxRQUN4QixVQUFVLENBQUM7QUFBQSxRQUNYLE1BQU0sU0FBUztBQUFBLFFBQ2YsTUFBTTtBQUFBLFFBQ04sTUFBTSxTQUFTO0FBQUEsUUFDZixRQUFRLENBQUM7QUFBQSxRQUNULFFBQVE7QUFBQSxNQUNUO0FBQ0E7QUFBQSxJQUNEO0FBRUEsWUFBUSxPQUFPLEtBQUssUUFBUTtBQUFBLEVBQzdCLENBQUM7QUFFRCxTQUFPO0FBQ1I7QUFFQSxTQUFTLGtCQUEyQjtBQUNuQyxRQUFNLG1CQUFtQixLQUFLLEtBQUssUUFBUSxJQUFJLEdBQUcsVUFBVTtBQUM1RCxRQUFNLGdCQUFnQixjQUFjLGdCQUFnQjtBQUNwRCxTQUFPO0FBQ1I7QUFFQSxTQUFTLFdBQW1CO0FBQzNCO0FBQ0EsU0FBTztBQUFBLElBQ04sTUFBTTtBQUFBLElBQ04sYUFBYTtBQUNaLGVBQVMsT0FBTyxnQkFBZ0I7QUFBQSxJQUNqQztBQUFBLElBQ0EsU0FBUztBQUFBLElBQ1QsZ0JBQWdCLEVBQUUsUUFBUSxHQUFHO0FBQzVCLGNBQVEsSUFBSSxHQUFHLFFBQVEsZ0JBQWdCO0FBQ3ZDLGNBQVEsR0FBRyxVQUFVLENBQUMsYUFBYTtBQUVsQyxpQkFBUyxPQUFPLGdCQUFnQjtBQUFBLE1BQ2pDLENBQUM7QUFBQSxJQUNGO0FBQUEsRUFDRDtBQUNEO0FBRUEsSUFBTSxXQUFXO0FBQUEsRUFDaEIsTUFBTTtBQUFBLElBQ0wsVUFBVSxDQUFDO0FBQUEsSUFDWCxNQUFNO0FBQUEsSUFDTixNQUFNO0FBQUEsSUFDTixNQUFNO0FBQUEsSUFDTixRQUFRLENBQUM7QUFBQSxJQUNULFFBQVE7QUFBQSxFQUNUO0FBQ0Q7OztBRDlIQSxPQUFPLG1CQUFtQjtBQUcxQixJQUFNLFNBQXFCO0FBQUEsRUFDMUIsU0FBUyxDQUFDLE1BQU0sR0FBRyxJQUFJLEdBQUcsY0FBYyxHQUFHLFNBQVMsQ0FBQztBQUN0RDtBQUVBLElBQU8sc0JBQVE7IiwKICAibmFtZXMiOiBbImNvbmZpZyJdCn0K
